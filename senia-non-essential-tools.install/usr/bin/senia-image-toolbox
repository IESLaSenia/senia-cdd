#!/usr/bin/python
# Author: Angel Berlanas Vicente
# angel.berlanas@gmail.com

import cv2
import sys
import os



def sanityChecks(imagePath):
	# Sanity checks
	if not os.path.exists(imagePath):
		print(" [ ERROR ] : La imagen no existe o no se puede leer")
		sys.exit(1)

def showImage(imagePath,debug=False):
	# Vamos a ir depurando el programa y devolver las diferentes opciones que 
	# vamos necesitando, por ahora si le pasamos una opcion "-s" lo que haremos
	# sera mostrar la imagen que ha sido indicada como argumento
	image = cv2.imread(imagePath)
	scaled_factor=7
	newx, newy= image.shape[1]/scaled_factor,image.shape[0]/scaled_factor
	image_scaled = cv2.resize(image,(newx,newy))
	cv2.imshow("Image",image_scaled)
	cv2.waitKey(0)
	sys.exit(0)


def makeCarnet(imagePath,debug=False):

	nombre_JPG=os.path.basename(imagePath)
	ruta_carnet=os.path.dirname(imagePath)
	nombre_jpg,aux=os.path.splitext(nombre_JPG)
	fichero_carnet=str(nombre_jpg)+"_carnet"
	print("\n\n\n")
	print(" [ Procesando "+imagePath+" ] ->\n * Nombre : "+nombre_JPG+"\n * Path : "+ruta_carnet+"\n * Carnet : "+fichero_carnet)

	# Create the haar cascade
	faceCascade = cv2.CascadeClassifier(cascPath)

	# Read the image
	image = cv2.imread(imagePath)

	# Escalamos la imagen
	scaled_factor=7

	newx, newy= image.shape[1]/scaled_factor,image.shape[0]/scaled_factor
	image_scaled = cv2.resize(image,(newx,newy))
	#cv2.imshow("escalada",image_scaled)

	# Detectamos las caras en la imagen
	gray = cv2.cvtColor(image_scaled, cv2.COLOR_BGR2GRAY)
	# Detect faces in the image
	faces = faceCascade.detectMultiScale(
			gray,
			scaleFactor=1.1,
			minNeighbors=5,
			minSize=(30, 30),
			flags = cv2.cv.CV_HAAR_SCALE_IMAGE
	)

	print " [ Encontradas {0} cara/s ! ] ".format(len(faces))
	giro=0
	while ((len(faces) == 0 ) and (giro<=360)):
		giro=giro+90
		print(" * Giremos la imagen : "+str(giro)+" Grados")
		# grab the dimensions of the image and calculate the center
		# of the image
		(h, w) = image_scaled.shape[:2]
		center = (w / 2, h / 2)
		# rotate the image by 180 degrees
		M = cv2.getRotationMatrix2D(center, giro, 1.0)
		rotated = cv2.warpAffine(image_scaled, M, (w, h))
		
		# DEBUG PURPOSES
		#cv2.imshow("Girada",rotated)
		#cv2.waitKey(0)
		 
		gray = cv2.cvtColor(rotated, cv2.COLOR_BGR2GRAY)
		print(" * [ Warning ] : No se han detectado caras...procesando de nuevo")
		faces = faceCascade.detectMultiScale(
			gray,
			scaleFactor=1.1,
			minNeighbors=5,
			minSize=(30,30),
			flags = cv2.cv.CV_HAAR_SCALE_IMAGE
		)
		image_scaled=rotated
		print " [ En la segunda pasada hemos encontradas {0} cara/s ! ] ".format(len(faces))
		
	if (len(faces) > 1):
		print(" [ Warning ] : Mas de una cara detectada -> Generando varias fotos")	
	aux=0
	# Operamos con las caras
	for (x, y, w, h) in faces:
		# Dibujamos un rectangulo alrededor
		# cv2.rectangle(image_scaled, (x-60, y-70), (x+w+50, y+h+100), (0, 255, 0), 2)
		# Recortamos
		if (aux != 0):
			fichero_carnet=fichero_carnet+"_"+str(aux)
		
		crop_img=image_scaled[y-40:y+h+100,x-60:x+w+50]
		try :
			pass
			#cv2.imshow("Carnet",crop_img)
			#cv2.waitKey(0)
		except Exception as e:
			print(" [ ERROR ] "+str(e))
			#cv2.imshow("Carnet",image_scaled)
			#cv2.waitKey(0)
		
		cv2.imwrite(ruta_carnet+"/"+fichero_carnet+".jpg",crop_img)
		aux=int(aux)+1
		if (debug):
				print(" [DEBUG] : Carnet : "+ruta_carnet+"/"+fichero_carnet+".jpg")
		#cv2.imshow("[ Caras encontradas ]", image_scaled)
		#cv2.waitKey(0)


if __name__ == "__main__":
	# Obtenemos algunos parametros interesantes
	accion=sys.argv[1]
	imagePath = sys.argv[2]
	
	try:
		debugFlag = sys.argv[3]
		if (debugFlag == -d):
			debug=True
	except Exception as e:
			print(" [DEBUG] : Not in debug mode")
			debug=False
			
	cascPath="/usr/share/senia-non-essential-tools/haarcascade_frontalface.xml"
	sanityChecks(imagePath)
	
	
	if (accion == "-s"):
			showImage(imagePath)
	elif (accion == "-c"):
			makeCarnet(imagePath)
	



